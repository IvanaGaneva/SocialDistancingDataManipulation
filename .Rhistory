policy_state_simplified$PID)
if(length(changing_policies) != 0){
for(pc in changing_policies){
row_pc_df <- which(policy_state_simplified$PID == pc)
private_school_indicator <- F
# -------------------------------------------------------------------------------------
# Obtaining the dates for which this measure holds:
if(policy_state_simplified$begins[row_pc_df] >
policy_state_simplified$finishes[row_pc_df]){
# WARNING: THIS SHOULD NOT HAPPEN, BUT THERE APPEARS TO BE MISTAKE IN THE ENTRIES OF
#          A FEW POLICY - THE TWO DATES ARE INTERCHANGED
#          TAKE FOR EXAMPLE POLICY # MI0168
pc_policy_dates <- seq(policy_state_simplified$finishes[row_pc_df],
policy_state_simplified$begins[row_pc_df],
by = 'days')
} else{
# the normal input scenario
pc_policy_dates <- seq(policy_state_simplified$begins[row_pc_df],
policy_state_simplified$finishes[row_pc_df],
by = 'days')
}
last_day_pc_policy <- pc_policy_dates[length(pc_policy_dates)]
first_day_pc_policy <- pc_policy_dates[1]
# -------------------------------------------------------------------------------------
# Obtaining the locations for which this measure holds:
if(policy_state_simplified$SWGeo[row_pc_df] == 1){
counties_to_fill_vec <- unique(as.character(df_to_fill$County))
# i.e. if it is state-wide geographically, fill for all counties in the state
#      for this policy instance
} else{
if(!(is.na(policy_state_simplified$Joins[row_pc_df]))|
!(is.na(policy_state_simplified$Expands[row_pc_df]))){
# i.e. if this policy joins a previous one, and locations are specified
# joins_id_row <- which(policy_state_simplified$PID == policy_state_simplified$Joins[row_pc_df])
# this is the past policy it joins
joins_id_row <- c(policy_state_simplified$Joins[row_pc_df],
policy_state_simplified$Expands[row_pc_df]) %>%
na.omit()
joins_id_row <- joins_id_row[1]
joins_id_row <- which(policy_state_simplified$PID == joins_id_row)
if(length(joins_id_row) == 0){
joins_id_row <- max(which(changing_policies == pc), 1)
}
if(policy_state_simplified$SWGeo[joins_id_row] == 1){
if(policy_type != 'cat_sch'){
joins_id_locations <- unique(as.character(df_to_fill$County))
# ideally, this case should not occur with other variables than SchoolClose
# cannot join a policy which was initially SWGeo
} else{
private_school_indicator <- T
# This means that the variable will be filling ONLY for the private schools
# (secondary) variable
joins_id_locations <- unlist(str_split(policy_state_simplified$AppliesTo[row_pc_df],
', '))
}
} else{
joins_id_locations <- unlist(str_split(policy_state_simplified$AppliesTo[joins_id_row],
', '))
}
# and these are the locations it joins
# Here, the counties for which the policy applies to will be simply:
counties_to_fill_vec <- union(unlist(str_split(policy_state_simplified$AppliesTo[row_pc_df],
', ')),
# these are the newly-added locations
joins_id_locations)
# and these are the old ones
rm(joins_id_row, joins_id_locations)
} else{
if(!(is.na(policy_state_simplified$Leaves[row_pc_df]))|
!(is.na(policy_state_simplified$Eases[row_pc_df]))){
# i.e. if this policy LEAVES a previous one, and locations are specified
# [this case is simpler, see data documentation for reference]
counties_to_fill_vec <- unlist(str_split(policy_state_simplified$AppliesTo[row_pc_df],
', '))
}
}
}
# Now that we have the locations and the dates, we can obtain their combinations:
# [similary to what has been done in the aux_fun_chains_START_fill function]
# Putting the dates-locations combinations to be filled in a single vector:
which_loc_date_vec <- which((df_to_fill$County %in% counties_to_fill_vec) &
(df_to_fill$Date %in% pc_policy_dates))
# -------------------------------------------------------------------------------------
# Now, actually filling the instances in the data frame:
if(policy_type == 'cat_sch'){
# =========== THIS IS FOR THE SchoolClose VARIABLE
if(is.na(policy_state_simplified$SchoolRestrictLevel[row_pc_df])){
# That is, if level is not present
if(!(is.na(policy_state_simplified$Expands[row_pc_df]))|
!(is.na(policy_state_simplified$Joins[row_pc_df]))){
# i.e. if level is not present and policy is expansive w.r.t previous one
related_policy_level <- policy_state_simplified$SchoolRestrictLevel[policy_state_simplified$PID %in%
c(policy_state_simplified$Expands[row_pc_df],
policy_state_simplified$Joins[row_pc_df])]
related_policy_level <- related_policy_level[!(is.na(related_policy_level))]
related_policy_level <- related_policy_level[1]
if(related_policy_level %in% c('NoInPerson', 'LimitedInPerson')){
policy_level_to_fill_with <- 'NoInPerson'
} else{
if(related_policy_level == 'InPersonAllowed'){
policy_level_to_fill_with <- 'LimitedInPerson'
}
}
} else{
if(!(is.na(policy_state_simplified$Eases[row_pc_df]))|
!(is.na(policy_state_simplified$Leaves[row_pc_df]))){
# i.e. if level is not present and policy is easing w.r.t previous one
related_policy_level <- policy_state_simplified$SchoolRestrictLevel[policy_state_simplified$PID %in%
c(policy_state_simplified$Eases[row_pc_df],
policy_state_simplified$Leaves[row_pc_df])]
related_policy_level <- related_policy_level[!(is.na(related_policy_level))]
related_policy_level <- related_policy_level[1]
if(related_policy_level %in% c('InPersonAllowed', 'LimitedInPerson')){
policy_level_to_fill_with <- 'InPersonAllowed'
} else{
if(related_policy_level == 'NoInPerson'){
policy_level_to_fill_with <- 'LimitedInPerson'
}
}
}
}
} else{
# That is, if level IS present
policy_level_to_fill_with <- policy_state_simplified$SchoolRestrictLevel[row_pc_df]
}
# Now, looking at whether we should fill for public/private schools only,
# or should we fill for both!
if(private_school_indicator){
# i.e. if need to fill only for private schools:
df_to_fill$policy_measure_var_sec[which_loc_date_vec] <- policy_level_to_fill_with
} else{
df_to_fill$policy_measure_var_main[which_loc_date_vec] <- policy_level_to_fill_with
if(str_detect(policy_state_simplified$PolicyCodingNotes[row_pc_df], 'private|Private')){
# i.e. if need to fill for both
df_to_fill$policy_measure_var_sec[which_loc_date_vec] <- policy_level_to_fill_with
}
}
# ============================ END OF SCHOOLCLOSE VARIABLE (most complex case)
} else{
if(policy_type == 'bin'){
# ========= THIS IS FOR THE EmergDec, CaseIsolation, StayAtHome, BusinessMask, SchoolMask,
#                           Quarantine, & the three TravelRestrict VARIABLES
df_to_fill$policy_measure_var_main[which_loc_date_vec] <- 1
} else{
if(policy_type == 'cat_bus'){
# ======= THIS IS FOR THE BarRestrict, RestaurantRestrict, OtherBusinessClose and the
#                         NEBusinessClose VARIABLES
if(is.na(policy_state_simplified$BusinessRestrictLevel[row_pc_df])){
# That is, if level is not present
if(!(is.na(policy_state_simplified$Expands[row_pc_df]))|
!(is.na(policy_state_simplified$Joins[row_pc_df]))){
# i.e. if level is not present and policy is expansive w.r.t previous one
related_policy_level <- policy_state_simplified$BusinessRestrictLevel[policy_state_simplified$PID %in%
c(policy_state_simplified$Expands[row_pc_df],
policy_state_simplified$Joins[row_pc_df])]
related_policy_level <- related_policy_level[!(is.na(related_policy_level))]
related_policy_level <- related_policy_level[1]
if(related_policy_level %in% c('FullClose', 'TakeawayOnly')){
policy_level_to_fill_with <- 'FullClose'
} else{
if(related_policy_level == 'OutdoorOnly'){
policy_level_to_fill_with <- 'TakeawayOnly'
} else{
if(related_policy_level == 'IndoorAllowed'){
policy_level_to_fill_with <- 'OutdoorOnly'
}
}
}
} else{
if(!(is.na(policy_state_simplified$Eases[row_pc_df]))|
!(is.na(policy_state_simplified$Leaves[row_pc_df]))){
# i.e. if level is not present and policy is easing w.r.t previous one
related_policy_level <- policy_state_simplified$BusinessRestrictLevel[policy_state_simplified$PID %in%
c(policy_state_simplified$Eases[row_pc_df],
policy_state_simplified$Leaves[row_pc_df])]
related_policy_level <- related_policy_level[!(is.na(related_policy_level))]
related_policy_level <- related_policy_level[1]
if(related_policy_level %in% c('IndoorAllowed', 'OutdoorOnly')){
policy_level_to_fill_with <- 'IndoorAllowed'
} else{
if(related_policy_level == 'TakeawayOnly'){
policy_level_to_fill_with <- 'OutdoorOnly'
} else{
if(related_policy_level == 'FullClose'){
policy_level_to_fill_with <- 'TakeawayOnly'
}
}
}
}
}
} else{
# That is, if the level IS present:
policy_level_to_fill_with <- policy_state_simplified$BusinessRestrictLevel[row_pc_df]
}
# Actually filling now:
df_to_fill$policy_measure_var_main[which_loc_date_vec] <- policy_level_to_fill_with
} else{
if(policy_type == 'numb'){
# ======= THIS IS FOR THE GathRestrict VARIABLE
df_to_fill$policy_measure_var_main[which_loc_date_vec] <- 'GathRestrict: see limit var-s'
} else{
if(policy_type == 'cat_mand'){
# ===== THIS IS FOR THE PublicMask VARIABLE
if(is.na(policy_state_simplified$PublicMaskLevel[row_pc_df])){
# That is, if level is not present
if(!(is.na(policy_state_simplified$Expands[row_pc_df]))|
!(is.na(policy_state_simplified$Joins[row_pc_df]))){
# i.e. if level is not present and policy is expansive w.r.t previous one
related_policy_level <- policy_state_simplified$PublicMaskLevel[policy_state_simplified$PID %in%
c(policy_state_simplified$Expands[row_pc_df],
policy_state_simplified$Joins[row_pc_df])]
related_policy_level <- related_policy_level[!(is.na(related_policy_level))]
related_policy_level <- related_policy_level[1]
if(related_policy_level %in% c('Mandate3', 'Mandate2')){
policy_level_to_fill_with <- 'Mandate3'
} else{
if(related_policy_level == 'Mandate1'){
policy_level_to_fill_with <- 'Mandate2'
} else{
if(related_policy_level == 'NotMentioned'){
policy_level_to_fill_with <- 'Mandate1'
}
}
}
} else{
if(!(is.na(policy_state_simplified$Eases[row_pc_df]))|
!(is.na(policy_state_simplified$Leaves[row_pc_df]))){
# i.e. if level is not present and policy is easing w.r.t previous one
related_policy_level <- policy_state_simplified$PublicMaskLevel[policy_state_simplified$PID %in%
c(policy_state_simplified$Eases[row_pc_df],
policy_state_simplified$Leaves[row_pc_df])]
related_policy_level <- related_policy_level[!(is.na(related_policy_level))]
related_policy_level <- related_policy_level[1]
if(related_policy_level %in% c('NotMentioned', 'Mandate1')){
policy_level_to_fill_with <- 'NotMentioned'
} else{
if(related_policy_level == 'Mandate2'){
policy_level_to_fill_with <- 'Mandate1'
} else{
if(related_policy_level == 'Mandate3'){
policy_level_to_fill_with <- 'Mandate2'
}
}
}
}
}
} else{
# i.e. if level is present
policy_level_to_fill_with <- policy_state_simplified$PublicMaskLevel[row_pc_df]
}
# Actually filling now:
df_to_fill$policy_measure_var_main[which_loc_date_vec] <- policy_level_to_fill_with
}
}
}
}
}
# -------------------------------------------------------------------------------------
# Lastly, filling for the perc_usual_time, only_non_vaccinated_ppl, lim_in_general,
# lim_out_general, lim_in_rel, lim_out_rel, & the mandate columns:
# ===============================
# FILLING FOR THE TIME DIMENSION:
if(policy_state_simplified$Curfew[row_pc_df] %in% not_vec){
df_to_fill$perc_usual_time[which_loc_date_vec] <- 'All the time'
} else{
df_to_fill$perc_usual_time[which_loc_date_vec] <- paste0('From ',
policy_state_simplified$CurfewStart[row_pc_df],
' to ',
policy_state_simplified$CurfewEnd[row_pc_df])
}
# =========================================
# FILLING FOR THE VACCINATED PPL DIMENSION:
if(policy_state_simplified$VaccineExempt[row_pc_df] %in% not_vec){
df_to_fill$only_non_vaccinated_ppl[which_loc_date_vec] <- 0
} else{
df_to_fill$only_non_vaccinated_ppl[which_loc_date_vec] <- 1
}
# ==================================
# FILLING FOR THE MANDATE DIMENSION:
if(policy_state_simplified$Mandate[row_pc_df] %in% not_vec){
df_to_fill$mandate[which_loc_date_vec] <- 0
} else{
df_to_fill$mandate[which_loc_date_vec] <- 1
}
# =====================================
# FILLING FOR THE GATHERINGS DIMENSION:
# -> FOR INSIDE, GENERAL GATHERINGS
if(is.na(policy_state_simplified$InGathLim[row_pc_df])){
df_to_fill$lim_in_general[which_loc_date_vec] <- 'No limit'
} else{
df_to_fill$lim_in_general[which_loc_date_vec] <- policy_state_simplified$InGathLim[row_pc_df]
}
# -> FOR OUTSIDE, GENERAL GATHERINGS
if(is.na(policy_state_simplified$OutGathLim[row_pc_df])){
df_to_fill$lim_out_general[which_loc_date_vec] <- 'No limit'
} else{
df_to_fill$lim_out_general[which_loc_date_vec] <- policy_state_simplified$OutGathLim[row_pc_df]
}
# -> FOR INSIDE, RELIGIOUS GATHERINGS
if(is.na(policy_state_simplified$InGathLimReligious[row_pc_df])){
df_to_fill$lim_in_rel[which_loc_date_vec] <- 'No limit'
} else{
df_to_fill$lim_in_rel[which_loc_date_vec] <- policy_state_simplified$InGathLimReligious[row_pc_df]
}
# -> FOR OUTSIDE, RELIGIOUS GATHERINGS
if(is.na(policy_state_simplified$OutGathLimReligious[row_pc_df])){
df_to_fill$lim_out_rel[which_loc_date_vec] <- 'No limit'
} else{
df_to_fill$lim_out_rel[which_loc_date_vec] <- policy_state_simplified$OutGathLimReligious[row_pc_df]
}
# -------------------- END OF FILLING PART ----------------------------------
}
}
}
}
}
df_temp <- FILL_function(data_measures = COVID_measures_df_REVIEWED,
county_data = counties_df,
state_name = 'Alabama',
policy_measure = policy,
not_vec = c(0, NA))
for(i in 2:length(all_states_considered)){
df_temp <- bind_rows(df_temp,
FILL_function(data_measures = COVID_measures_df_REVIEWED,
county_data = counties_df,
state_name = all_states_considered[i],
policy_measure = policy,
not_vec = c(0, NA)))
}
i
fileloc <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(fileloc)
# Removing the fileloc string
rm(fileloc)
# Setting locale
Sys.setlocale("LC_ALL", "English")
fileloc <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(fileloc)
# Removing the fileloc string
rm(fileloc)
# Setting locale
Sys.setlocale("LC_ALL", "English")
fileloc <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(fileloc)
# Removing the fileloc string
rm(fileloc)
# Setting locale
Sys.setlocale("LC_ALL", "English")
# --------------------------------------------------------------------------
# 0.2. Loading the necessary packages
library(tidyverse)                                       # for handling data
library(data.table)                                      # for handling data
library(rvest)                                           # for scraping data
# --------------------------------------------------------------------------
# 0.3. Clearing the workspace environment
rm(list = ls())
gc()
load('Environment_until_EELJ_2021-06-16.RData')
source('PolicyType.R')
source('Simple_EDA.R')
df_EDA <- simple_EDA_fun(main_df = COVID_measures_df_REVIEWED)
source('EmergDec.R')
source('aux_fun_chains_START_fill.R')
source('FILL_function.R')
county_data <- counties_df %>%
group_by(State) %>%
mutate(StatePopulation2019 = sum(Population2019)) %>%
ungroup()
# for testing/construction:
# ------------------------
policy <- 'NEBusinessClose'
df_temp <- FILL_function(data_measures = COVID_measures_df_REVIEWED,
county_data = counties_df,
state_name = 'Alabama',
policy_measure = policy,
not_vec = c(0, NA))
for(i in 2:length(all_states_considered)){
df_temp <- bind_rows(df_temp,
FILL_function(data_measures = COVID_measures_df_REVIEWED,
county_data = counties_df,
state_name = all_states_considered[i],
policy_measure = policy,
not_vec = c(0, NA)))
}
# for testing/construction:
# ------------------------
policy <- 'OtherBusinessClose'
df_temp <- FILL_function(data_measures = COVID_measures_df_REVIEWED,
county_data = counties_df,
state_name = 'Alabama',
policy_measure = policy,
not_vec = c(0, NA))
for(i in 2:length(all_states_considered)){
df_temp <- bind_rows(df_temp,
FILL_function(data_measures = COVID_measures_df_REVIEWED,
county_data = counties_df,
state_name = all_states_considered[i],
policy_measure = policy,
not_vec = c(0, NA)))
}
View(df_temp)
rm(df_temp, policy)
gc()
# for testing/construction:
# ------------------------
policy <- 'OtherBusinessClose'
df_temp <- FILL_function(data_measures = COVID_measures_df_REVIEWED,
county_data = counties_df,
state_name = 'Alabama',
policy_measure = policy,
not_vec = c(0, NA))
for(i in 2:length(all_states_considered)){
df_temp <- bind_rows(df_temp,
FILL_function(data_measures = COVID_measures_df_REVIEWED,
county_data = counties_df,
state_name = all_states_considered[i],
policy_measure = policy,
not_vec = c(0, NA)))
}
View(df_temp)
# Subsetting for mandatory only:
df_temp <- df_temp %>%
mutate(policy_measure_var_main = ifelse(is.na(mandate) | mandate == 0,
policy_type_function(policy)[2],
policy_measure_var_main)) %>%
# NA-s means these dates occur after the last policy ended => replace with usual value
# non-mandatory in THIS data set also translates to non-existent policy
dplyr::select(1:4)
colnames(df_temp)[4] <- policy
View(df_temp)
vec_bus_policies <- c('BarRestrict', 'RestaurantRestrict',
'OtherBusinessClose',  'NEBusinessClose')
# will put this inside a function:
# +++++++++++++++++++++++++++++++++++++++++++
make_bus_df_county_lvl <- function(policy){
# for testing/construction:
# ------------------------
# policy <- 'OtherBusinessClose'
# ------------------------
df_temp <- FILL_function(data_measures = COVID_measures_df_REVIEWED,
county_data = counties_df,
state_name = 'Alabama',
policy_measure = policy,
not_vec = c(0, NA))
for(i in 2:length(all_states_considered)){
df_temp <- bind_rows(df_temp,
FILL_function(data_measures = COVID_measures_df_REVIEWED,
county_data = counties_df,
state_name = all_states_considered[i],
policy_measure = policy,
not_vec = c(0, NA)))
}
# Subsetting for mandatory only:
df_temp <- df_temp %>%
mutate(policy_measure_var_main = ifelse(is.na(mandate) | mandate == 0,
policy_type_function(policy)[2],
policy_measure_var_main)) %>%
# NA-s means these dates occur after the last policy ended => replace with usual value
# non-mandatory in THIS data set also translates to non-existent policy
dplyr::select(1:4)
# Selecting the relevant variables only
colnames(df_temp)[4] <- policy
save(df_temp, file = paste0(policy, '_COUNTY_lvl.RData'))
return(df_temp)
}
# Making the list:
list_bus_policies <- list()
for(j in 1:length(vec_bus_policies)){
list_bus_policies[[j]] <- make_bus_df_county_lvl(vec_bus_policies[j])
}
View(list_bus_policies)
names(list_bus_policies) <- vec_bus_policies
# --------------------------------------------------------------------------
# Now, a function to transform the county-level data to state-level data:
make_bus_df_state_lvl <- function(policy){
df_temp <- list_bus_policies[[policy]] %>%
# adding the population as of 2019 from the county df:
left_join(county_data, by = c('State', 'County')) %>%
# obtaining for what percentage of the population within the whole state
# measures for public schools applied:
mutate(county_pop_frac_of_state_pop = Population2019/StatePopulation2019)
colnames(df_temp)[4] <- 'POLICYNAMEWILLBEHERE'
# Similarly to SchoolClose:
df_temp <- df_temp %>%
mutate(POLICYNAMEWILLBEHERE = factor(POLICYNAMEWILLBEHERE,
levels = c('FullClose',
'TakeawayOnly',
'OutdoorOnly',
'IndoorAllowed'),
labels = c('1', '0.75', '0.5', '0')))
# grouping by date and state now:
df_temp <- df_temp %>%
mutate(POLICYNAMEWILLBEHERE = as.numeric(as.character(POLICYNAMEWILLBEHERE))) %>%
mutate(POLICYNAMEWILLBEHERE_frac_pop = POLICYNAMEWILLBEHERE*county_pop_frac_of_state_pop) %>%
group_by(State, Date) %>%
summarize(fract_state_pop_with_POLICYNAMEWILLBEHERE = sum(POLICYNAMEWILLBEHERE_frac_pop))
colnames(df_temp)[3] <- paste0('frac_state_pop_with_', policy)
save(df_temp, file = paste0(policy, '_STATE_lvl.RData'))
return(df_temp)
}
list_bus_policies_STATE <- list()
for(j in 1:length(vec_bus_policies)){
list_bus_policies_STATE[[j]] <- make_bus_df_state_lvl(vec_bus_policies[j])
}
names(list_bus_policies_STATE) <- vec_bus_policies
list_bus_policies[[2]]
View(list_bus_policies_STATE)
View(list_bus_policies_STATE$BarRestrict)
View(list_bus_policies_STATE$NEBusinessClose)
View(list_bus_policies$BarRestrict)
View(list_bus_policies$NEBusinessClose)
View(list_bus_policies$OtherBusinessClose)
